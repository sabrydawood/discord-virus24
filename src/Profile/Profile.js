const Canvas = require("canvas");
const { formatVariable, applyText,textCircle,roundRect } = require("../../utils/functions");

//registerFont('comicsans.ttf', { family: 'Comic Sans' })

module.exports = class ProfileCard {
constructor() {
    this.backgroundImage = `${__dirname}/../../assets/default-bg.jpeg`;
    this.avatar = `${__dirname}/../../assets/default-avatar.png`;
    this.statues = "green";
    this.coins= 1000;
    this.level = "1";
    this.rank = "10";
    this.rankName = "rank Name";
    this.rep = "0";
    this.username = "username";
    this.xpCurrent = 8000;
    this.xpNeeded = 12000;
  
    this.addonRep = true;
    this.addonXp = true;
    this.addonCoins = true;
    this.addonLevel = true;
  
  // can changed colors 
  
    this.colorBackground = "#000";
    this.colorUsername = "#fff";
  
    this.colorLevelBox = "#fff";
    this.colorLevelText = "#000";
  
this.colorRepBox = "#fff";
this.colorRepText = "#000";
  
this.colorCoinsBox = "#fff";
this.colorCoinsText = "#000";

this.colorXpBox = "#fff";
this.colorXpText = "#000";
    this.colorNeededXp = "#fff";

    this.colorBar = "#fff";
  this.colorBarStroke = "aqua";
  
    this.radiusCorner = "20";
  
   this.textLevel = "Lvl :{level}";
    this.textCoins= "$ : {coins}";
    this.textXp = "Xp : {current}"
    this.textNeededXp = "{current}/{needed} for next rank";
    this.textRep = "Rep : +{rep}";

  //handling Errors
  if (typeof this.backgroundImage !== 'string') error("The Image Must Be A String ");
 if (typeof this.avatar !== 'string') error("The Image Must Be A String");

  }

  setAvatar(value) {
    this.avatar = value;
    return this;
  }

  setUsername(value) {
    this.username = value;
    return this;
  }
/*
  setRank(value) {
    this.rank = value;
    return this;
  }
*/
  setLevel(value) {
    this.level = value;
    return this;
  }

  setRep(value) {
    this.rep = value;
    return this;
  }
/*
  setRankName(value) {
    this.rankName = value;
    return this;
  }
*/
  setBackground(value) {
    this.backgroundImage = value;
    return this;
  }
/*
  setXp(variable, value) {
    const formattedVariable = formatVariable("xp :", variable);
    if (this[formattedVariable]) this[formattedVariable] = value;
    return this;
  }*/

  setColor(variable, value) {
    const formattedVariable = formatVariable("color", variable);
    if (this[formattedVariable]) this[formattedVariable] = value;
    return this;
  }

  setText(variable, value) {
    const formattedVariable = formatVariable("text", variable);
    if (this[formattedVariable]) this[formattedVariable] = value;
    return this;
  }
/*
  setOpacity(variable, value) {
    const formattedVariable = formatVariable("opacity", variable);
    if (this[formattedVariable]) this[formattedVariable] = value;
    return this;
  }*/

  setAddon(variable, value) {
    const formattedVariable = formatVariable("addon", variable);
    if (this[formattedVariable]) this[formattedVariable] = value;
    return this;
  }

  setRadius(value) {
    this.radiusCorner = value;
    return this;
  }
  setStatues(value) {
    if (value === 'online') {
      this.statues  = '#43B581';
    } else if (value === 'dnd') {
      this.statues  = '#F04747';
    } else if (value === 'idle') {
      this.statues  = '#FAA61A';
    } else if (value === 'offline') {
      this.statues  = '#747F8E';
    } else {
      this.statues  = '#593595';
    }

    return this;
  }
  
  async toAttachment() {
let packName = "This Profile Generated By discord-virus24 Package";
let canvas = Canvas.createCanvas(1080, 1080),
      ctx = canvas.getContext("2d");

    const lvlText = this.textLevel.replace(/{level}/g, this.level);
    const repText = this.textRep.replace(
      /{rep}/g,
      this.rep
    );
 const coinsText = this.textCoins.replace(/{coins}/g, this.coins);
 const xpText = this.textXp.replace(/{current}/g, this.xpCurrent);

    // Background
    let background = await Canvas.loadImage(this.backgroundImage);
    ctx.drawImage(background, 0, 0, 1080, 1080);
    ctx.restore();

    // Draw layer
    ctx.globalAlpha = 1;  ctx.fillRect(roundRect(canvas,50, 180, 240, 240, 20, 4,"red", "#000"));
    ctx.globalAlpha = 1;

   //right layer
ctx.globalAlpha = 1;  ctx.fillRect(roundRect(canvas,790, 180, 240, 240, 20, 4,"red", "#000"));
    ctx.globalAlpha = 1;



ctx.beginPath();
ctx.arc(canvas.width/2 + 10, 245, 30, 0, 2 * Math.PI);
ctx.fillStyle = this.statues;
ctx.fill();
ctx.strokeStyle = "red";
ctx.stroke();

    // Avatar
let avatar = await Canvas.loadImage(this.avatar);
ctx.save()
    ctx.beginPath()
    ctx.arc(550, 350, 110, 0, Math.PI * 2, false)
    ctx.strokeStyle = this.statues;
    ctx.fillStyle=this.statues;
    ctx.lineWidth= 10
    ctx.fill();

    
    ctx.stroke()
    ctx.clip()
    ctx.drawImage(avatar,440 , 240, 220, 220)
    ctx.restore()

    
    // Level
    if (this.addonLevel) {
 ctx.fillStyle = this.colorLevelBox;
    ctx.globalAlpha = 1;
   ctx.fillRect(80, 240, 180, 50);
    ctx.globalAlpha = 1;
    ctx.fillStyle = this.colorLevelText;
    ctx.font = applyText(canvas, lvlText, 32, 170, "Bold");
    ctx.textAlign = "center";
    ctx.fillText(lvlText, 260 / 2, 278);
    }

    // Rep
    if (this.addonRep) {
      ctx.fillStyle = this.colorRepBox;
      ctx.globalAlpha = 1;
      ctx.fillRect(80, 320, 180, 50);
      ctx.globalAlpha = 1;
      ctx.fillStyle =this.colorRepText;
      ctx.font = applyText(canvas, repText, 32, 170, "Bold");
      ctx.textAlign = "center";
      ctx.fillText(repText, 330 / 2, 358);
    }

        // coins
    if (this.addonCoins) {
          ctx.fillStyle = this.colorCoinsBox ;
    ctx.globalAlpha = 1;
   ctx.fillRect(820, 240, 180, 50);
    ctx.globalAlpha = 1;
    ctx.fillStyle = this.colorCoinsText;
    ctx.font = applyText(canvas, coinsText, 32, 170, "Bold");
    ctx.textAlign = "center";
    ctx.fillText(coinsText, 1780 / 2, 278);
    }


    // xp
if (this.addonXp) {
        ctx.fillStyle = this.colorXpBox;
      ctx.globalAlpha = 1;
      ctx.fillRect(820, 320, 180, 50);
      ctx.globalAlpha = 1;
      ctx.fillStyle =this.colorXpText;
      ctx.font = applyText(canvas, xpText, 32, 170, "Bold");
      ctx.textAlign = "center";
      ctx.fillText(xpText, 1810 / 2, 358);
}
    
    // Username
    ctx.textAlign = "left";
    ctx.fillStyle =this.colorUsername;
    ctx.font = applyText(canvas, this.username, 45, 460, "Bold");
ctx.fillText(textCircle(canvas,this.username,550, 350,130,Math.PI/10));
   //ctx.fillText(this.username, 430, 500);



//Xpprogress bar 
const latestXP = Number(this.xpNeeded) - Number(this.xpCurrent);
    const textXPEdited = this.textNeededXp
      .replace(/{needed}/g, this.xpNeeded)
      .replace(/{current}/g, this.xpCurrent)
      .replace(/{latest}/g, latestXP);
const percent = (100 * this.xpCurrent) / this.xpNeeded;
    const progress = (percent * 700) / 100;
const progressWidth = 900;
//progress bar rect
ctx.fillRect(roundRect(canvas,90 , 900, progressWidth, 40, 20, 20,this.colorBarStroke, this.colorBar));
ctx.fillRect(roundRect(canvas,90 , 900, progress, 40, 20, 20,this.colorBar, this.colorBar));
    
  // progress bar text 
        ctx.textAlign = "center";
    ctx.fillStyle = "#000";
    ctx.font = applyText(canvas, textXPEdited, 25, 690, "Bold");
    ctx.fillText(
      textXPEdited,
      1030 / 2,
      930
    );

// text profile 
ctx.fillStyle = "pink";
ctx.globalAlpha = 1;
ctx.fillRect(roundRect(canvas,canvas.width /2 - 75, 27, 200, 50, 20, 4,"aqua", "pink"));
ctx.globalAlpha = 1;
ctx.fillStyle ="#000";
ctx.font = applyText(canvas, xpText, 32, 170, "Bold");
ctx.textAlign = "left";
ctx.fillText("PROFILE", canvas.width /2 - 40, 65);
//package geneated text
ctx.fillStyle = "pink";
ctx.globalAlpha = 1;
ctx.fillRect(30, 1024, 1024, 50);
ctx.globalAlpha = 1;
ctx.fillStyle ="#000";
ctx.font = applyText(canvas, xpText, 32, 170, "Bold");
ctx.textAlign = "left";
ctx.fillText(packName, 130, 1058);

  
ctx.restore();


  
    return canvas;
}

};
